config.ini

[General]
output_folder = ./output
log_directory = ./logs
cpu_limit_percentage = 95
ng_count_thresh = 1
resolution_width = 640
resolution_height = 480
hours_to_keep = 72
countdown_seconds = 180
detection_enabled = True
ftp_ip = tw100040419
gpio_port = 17
xbee_panid = 757

[Cam1]
lower_thresh = 0.04
upper_thresh = 0.15
x1 = 360
y1 = 22
x2 = 420
y2 = 60
lower_color_r = 0
lower_color_g = 92
lower_color_b = 80
upper_color_r = 27
upper_color_g = 130
upper_color_b = 130

[Cam2]
lower_thresh = 0.085
upper_thresh = 0.2
x1 = 280
y1 = 0
x2 = 360
y2 = 330
lower_color_r = 5
lower_color_g = 30
lower_color_b = 80
upper_color_r = 50
upper_color_g = 50
upper_color_b = 120

--------------------------------------------------------------

main.py

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import io
import os
import cv2
import time
import json
import logging
import platform
system = platform.system()
if system == "Linux":
    import psutil
    import serial
    import serial.tools.list_ports
    import RPi.GPIO as GPIO
    on_windows = False
else:
    on_windows = True
import shutil
import threading
from datetime import datetime, timedelta
import numpy as np
import configparser
import multiprocessing  as mp
from ftplib import FTP
from tkinter import Tk, Label, Entry, Button, messagebox , Toplevel, Frame, StringVar, OptionMenu

config_path = "./config.ini"

SUPPORTED_RESOLUTIONS = [
    (160, 120),
    (320, 240),
    (640, 480),
    (1280, 720),
    (1920, 1080)
]

default_config = {
    "General": {
        "output_folder": "/home/pi/Desktop/output",
        "log_directory": "/home/pi/Desktop/logs", 
        "cpu_limit_percentage": 95,
        "ng_count_thresh": 1,
        "resolution_width": 640,
        "resolution_height": 480,
        "hours_to_keep": 72,
        "countdown_seconds": 180,
        "detection_enabled": True,
        "ftp_ip": "10.97.210.67",
        "gpio_port": "17",
        "xbee_PanID": "757"
    },
    "Cam1": {
        "lower_thresh": 0.05,
        "upper_thresh": 0.2,
        "x1": 345,
        "y1": 110,
        "x2": 425,
        "y2": 200,
        "lower_color_R": 5,
        "lower_color_G": 30,
        "lower_color_B": 80,
        "upper_color_R": 50,
        "upper_color_G": 50,
        "upper_color_B": 120
    },
    "Cam2": {
        "lower_thresh": 0.085,
        "upper_thresh": 0.2,
        "x1": 280,
        "y1": 0,
        "x2": 360,
        "y2": 330,
        "lower_color_R": 5,
        "lower_color_G": 30,
        "lower_color_B": 80,
        "upper_color_R": 50,
        "upper_color_G": 50,
        "upper_color_B": 120
    }
}

recording_active = False
auto_start_timer = None
countdown_label = None

################ Config ################

def save_config(config):
    with open(config_path, "w") as configfile:
        config.write(configfile)
        
def load_config():
    config = configparser.ConfigParser()
    if os.path.exists(config_path):
        config.read(config_path)
    else:
        for section, settings in default_config.items():
            config[section] = settings
        save_config(config)
        
    return config

config = load_config()
#General#    
output_folder = config.get('General', 'output_folder')
log_directory = config.get('General', 'log_directory')
cpu_limit_percentage = config.getint('General', 'cpu_limit_percentage')
ng_count_thresh = config.getint('General', 'ng_count_thresh')
resolution = (int(config['General']['resolution_width'].strip()), int(config['General']['resolution_height'].strip()))
hours_to_keep = config.getint('General', 'hours_to_keep')
countdown_seconds = config.getint('General', 'countdown_seconds')
detection_enabled = config.getboolean('General', 'detection_enabled')
ftp_ip = config.get('General', 'ftp_ip')
gpio_port = config.getint('General', 'gpio_port')
xbee_PanID = config.getint('General', 'xbee_PanID')

#Cam1#
Cam1_lower_thresh = config.getfloat("Cam1", "lower_thresh")
Cam1_upper_thresh = config.getfloat("Cam1", "upper_thresh")
Cam1_x1 = max(0, config.getint('Cam1', 'x1'))
Cam1_x1 = min(resolution[0], config.getint('Cam1', 'x1'))
Cam1_y1 = max(0, config.getint('Cam1', 'y1'))
Cam1_y1 = min(resolution[1], config.getint('Cam1', 'y1'))
Cam1_x2 = max(0, config.getint('Cam1', 'x2'))
Cam1_x2 = min(resolution[0], config.getint('Cam1', 'x2'))
Cam1_y2 = max(0, config.getint('Cam1', 'y2'))
Cam1_y2 = min(resolution[1], config.getint('Cam1', 'y2'))
Cam1_lower_color_R = config.getint('Cam1', 'lower_color_R')
Cam1_lower_color_G = config.getint('Cam1', 'lower_color_G')
Cam1_lower_color_B = config.getint('Cam1', 'lower_color_B')
Cam1_lower_color = np.array([Cam1_lower_color_R, Cam1_lower_color_G, Cam1_lower_color_B])
Cam1_upper_color_R = config.getint('Cam1', 'upper_color_R')
Cam1_upper_color_G = config.getint('Cam1', 'upper_color_G')
Cam1_upper_color_B = config.getint('Cam1', 'upper_color_B')
Cam1_upper_color = np.array([Cam1_upper_color_R, Cam1_upper_color_G, Cam1_upper_color_B])

#Cam2#
Cam2_lower_thresh = config.getfloat("Cam2", "lower_thresh")
Cam2_upper_thresh = config.getfloat("Cam2", "upper_thresh")
Cam2_x1 = max(0, config.getint('Cam2', 'x1'))
Cam2_x1 = min(resolution[0], config.getint('Cam2', 'x1'))
Cam2_y1 = max(0, config.getint('Cam2', 'y1'))
Cam2_y1 = min(resolution[1], config.getint('Cam2', 'y1'))
Cam2_x2 = max(0, config.getint('Cam2', 'x2'))
Cam2_x2 = min(resolution[0], config.getint('Cam2', 'x2'))
Cam2_y2 = max(0, config.getint('Cam2', 'y2'))
Cam2_y2 = min(resolution[1], config.getint('Cam2', 'y2'))
Cam2_lower_color_R = config.getint('Cam2', 'lower_color_R')
Cam2_lower_color_G = config.getint('Cam2', 'lower_color_G')
Cam2_lower_color_B = config.getint('Cam2', 'lower_color_B')
Cam2_lower_color = np.array([Cam2_lower_color_R, Cam2_lower_color_G, Cam2_lower_color_B])
Cam2_upper_color_R = config.getint('Cam2', 'upper_color_R')
Cam2_upper_color_G = config.getint('Cam2', 'upper_color_G')
Cam2_upper_color_B = config.getint('Cam2', 'upper_color_B')
Cam2_upper_color = np.array([Cam2_upper_color_R, Cam2_upper_color_G, Cam2_upper_color_B])

################ Logger ################

def set_logger(current_time):
    log_filename = log_directory + f"/{current_time}.log" # 設定日誌檔案名稱
    if not os.path.exists(log_directory):  # 若資料夾不存在，則創建它
        os.makedirs(log_directory)
    logger = logging.getLogger(__name__) # 建立新的日誌記錄器
    logger.setLevel(logging.DEBUG)
    
    if not logger.handlers: # 如果logger沒有已存在的處理器
        file_handler = logging.FileHandler(log_filename) # 建立檔案處理器並設定日誌格式
        file_handler.setFormatter(logging.Formatter('%(asctime)s %(levelname)s %(name)s %(message)s'))
        logger.addHandler(file_handler) # 新增檔案處理器到logger中
    else: # 如果logger已有已存在的處理器
        handler = logger.handlers[0] # 獲取第一個處理器
        
        if not current_time in handler.baseFilename: # 檢查處理器的檔案名稱是否包含當前日期
            logger.removeHandler(handler) # 移除已存在的處理器
            file_handler = logging.FileHandler(log_filename) # 建立新的檔案處理器並設定日誌格式
            file_handler.setFormatter(logging.Formatter('%(asctime)s %(levelname)s %(name)s %(message)s'))
            logger.addHandler(file_handler) # 新增新的檔案處理器到logger中
            
    return logger

################ FTP ################

#ftp://10.97.210.67/ftp-data/
def upload_to_ftp(cam_name, image):
    is_success, buffer = cv2.imencode(".jpg", image) # 將圖像編碼為JPEG格式
    data = io.BytesIO(buffer)
    now = datetime.now()
    timestamp = now.strftime("%Y%m%d%H%M%S")
    filename = f"{cam_name}_{timestamp}.jpg"
    try:
        ftp = FTP(ftp_ip, timeout=1) # 建立FTP連接
        ftp.login() # 登入FTP伺服器
        ftp.cwd('/pr_residure/B20') # 切換到指定目錄
        ftp.storbinary(f'STOR {filename}', data) # 上傳二進位數據
        logger.info('Image uploaded successfully')
        ftp.quit() # 關閉FTP連接
    except Exception as e:
        logger.warning('upload FTP Error: {}'.format(str(e)))

################ GPIO ################
if not on_windows:
    GPIO.setmode(GPIO.BCM)
    GPIO.setwarnings(False)

    class GPIO_OUT():
        def __init__(self, pin = 19, initial = GPIO.HIGH):
            self.pin = pin
            GPIO.setup(pin, GPIO.OUT, initial=initial)

        def OUT_HIGH(self):
            GPIO.output(self.pin, GPIO.HIGH)
            
        def OUT_LOW(self):
            GPIO.output(self.pin, GPIO.LOW)

    class GPIO_IN():
        def __init__(self, pin = 19):
            self.pin = pin
            GPIO.setup(pin, GPIO.IN)

        def GET_GPIO(self):
            return GPIO.input(self.pin)

    redRelay = GPIO_IN(gpio_port)
    
################ Relay USB ################
if not on_windows:
    Relay_port = ""
    serial_prot_list = serial.tools.list_ports.comports()
    for element in serial_prot_list:
        print(element[1])
        if "USB" in element[1] and "Serial" in element[1] and not "Controller" in element[1]:
            Relay_port = element[0]
            logger.info('Relay Port: ', Relay_port)

    class RelayUSB():
        def __init__(self, devicePort = '/dev/ttyUSB1', baud = 9600, timeout=0.5):
            self.devicePort = devicePort
            self.baud = baud
            self.timeout = timeout
            self.device = serial.Serial(self.devicePort, self.baud, timeout = self.timeout)
            self.openStr = bytearray(b"\xA0\x01\x01\xA2")
            self.closeStr = bytearray(b"\xA0\x01\x00\xA1")
            self.status = 0
        def Relay_Open(self):
            if self.status == 0:
                self.status = 1
                self.device.write(self.openStr)
                self.status = 0        
        def Relay_Close(self):
            if self.status == 0:
                self.status = 1
                self.device.write(self.closeStr)
                self.status = 0  

        def Relay_Close_to_Open(self, timeOut = 1):
            if self.status == 0:
                self.status = 1
                self.device.write(self.closeStr)
                time.sleep(timeOut)
                self.device.write(self.openStr)
                self.status = 0  
        def Relay_Open_to_Close(self, timeOut = 1):
            if self.status == 0:
                self.status = 1
                self.device.write(self.openStr)
                logger.info('relay close!!!')
                time.sleep(timeOut)
                self.device.write(self.closeStr)
                logger.info('relay open!!!')
                self.status = 0  
        def close(self):
            self.device.close()

    #Rusb = RelayUSB(Relay_port)

################ XBee ################

def job(devicePort, baud, timeout, XBee_MAC, data):
    ser = serial.Serial(devicePort, baud, timeout = timeout)
    dataStr = chr(0x02) + XBee_MAC;
    dataStr = dataStr + "," + str(len(data));
    for i in range(len(data)):
        dataStr = dataStr + "," + str(data[i]);
    dataStr = dataStr + chr(0x03) + chr(0x13) + chr(0x10) + '\r\n'
    portDataStr = bytes(dataStr, 'utf-8')
    ser.write(portDataStr)
    ser.close()    

class XBee():
    def __init__(self, XBee_MAC = 'XBee_MAC', devicePort = '/dev/ttyUSB0', baud = 9600, timeout=0.5, mode = 1):
        self.XBee_MAC = XBee_MAC
        self.devicePort = devicePort
        self.baud = baud
        self.timeout = timeout
        self.mode = mode
        self.bool_counter = 0
        
    def xbee_process(self, data):  #xbee_process(TEXT,XBee_MAC)
        if self.mode == 1:
            thread1 = mp.Process(target = job, args = (self.devicePort, self.baud, self.timeout, self.XBee_MAC, data, ))
            thread1.start()
        else:
            thread1 = threading.Thread(target = job, args = (self.devicePort, self.baud, self.timeout, self.XBee_MAC, data, ))
            thread1.start()
            
    def xbee_setPanID(self, panid):
        ser = serial.Serial(self.devicePort, self.baud, timeout = self.timeout)
        dataStr = "+++"
        portDataStr = bytes(dataStr, 'utf-8')
        ser.write(portDataStr)
        time.sleep(1)
        dataStr = '\r\n' + "ATID " + str(panid) + '\r\n' + "ATJV 1" + '\r\n' + "ATWR" + '\r\n' + "ATAC" + '\r\n' + "ATCN" + '\r\n'
        portDataStr = bytes(dataStr, 'utf-8')
        ser.write(portDataStr)
        time.sleep(1)
        ser.close()
        
    def xbee_result(self, result):
        if result == "Pass":
            logger.info('XBEE send Pass!!!')
            if self.bool_counter == 0:
                self.xbee_process(['5'])
                self.bool_counter = 1
            else:
                self.xbee_process(['10'])
                self.bool_counter = 0
        elif result == "NG":
            logger.info('XBEE send NG!!!')
            for i in range(20):
                self.xbee_process(['20'])
        else:
            self.xbee_process(['0'])

if not on_windows:
    a = XBee(devicePort = "/dev/ttyUSB0", mode = 0)
    a.xbee_setPanID(xbee_PanID)   
   
################ Safety ################
    
def get_cpu_temp():
    """獲取CPU溫度。"""
    return round(psutil.sensors_temperatures()['cpu-thermal'][0].current, 1)

def get_cpu_used():
    """獲取CPU使用率。"""
    return psutil.cpu_percent(interval=None)

def get_gpu_temp():
    """獲取GPU溫度。"""
    gpu_temp_info = os.popen('vcgencmd measure_temp').readline()
    return float(gpu_temp_info.replace("temp=","").replace("'C\n",""))

def safety_check():
    cpu_used = get_cpu_used()  # 獲取CPU使用率
    while cpu_used > cpu_limit_percentage:
        time.sleep(0.1)  # 等待0.1秒

    cpu_temp = get_cpu_temp()  # 獲取CPU溫度
    gpu_temp = get_gpu_temp()  # 獲取GPU溫度
    logger.info('CPU Usage: '+ str(cpu_used) + '%, ' + 'CPU Temp: ' + str(cpu_temp) + '°C / ' + 'GPU Temp: ' + str(gpu_temp) + '°C')

    while cpu_temp > 75 or gpu_temp > 75:
        logger.warning(f"Stopped due to high temperature. CPU Temp: {cpu_temp} | GPU Temp: {gpu_temp}")
        logger.warning('Sleeping for 10 minutes for cooling down.')
        time.sleep(600)  # 休眠10分鐘
        cpu_temp = get_cpu_temp()  # 重新獲取CPU溫度
        gpu_temp = get_gpu_temp()  # 重新獲取GPU溫度
        if cpu_temp < 65 or gpu_temp < 65:
            logger.info('Successfully Cooling down . Return to work!!!')
            break


def videowriter(cam_name, frame_size):
    # 設定錄影參數
    fourcc = cv2.VideoWriter_fourcc(*'H264')
    fps = 30.0
    
    # 建立每小時一支影片的子資料夾路徑 若子資料夾不存在，則建立資料夾
    now = datetime.now()
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)
    current_hour_folder = os.path.join(output_folder, now.strftime("%Y%m%d%H"))
    if not os.path.exists(current_hour_folder):
        os.makedirs(current_hour_folder)
    
    # 建立影片檔案名稱
    video_name = cam_name + now.strftime("%Y%m%d%H") + ".mp4"
    video_path = os.path.join(current_hour_folder, video_name)

    # 開啟影片輸出
    out = cv2.VideoWriter(video_path, fourcc, fps, frame_size)
    return out
    
# 刪除超過指定時數的舊資料夾
def delete_old_folders(folder_path, hours_to_keep):
    folders = [f for f in os.listdir(folder_path) if os.path.isdir(os.path.join(folder_path, f))]
    
    now = datetime.now()
    for folder in folders:
        check_folder_path = os.path.join(folder_path, folder)
        folder_created = datetime.fromtimestamp(os.path.getctime(check_folder_path))
        
        # 檢查資料夾是否超過指定的保留時數
        if now - folder_created >= timedelta(hours=hours_to_keep):
            shutil.rmtree(check_folder_path)  # 刪除資料夾
            logger.info(f"Deleted folder: {check_folder_path}")

def find_cameras(max_cameras=4):
    cameras = {}
    c = 0
    for i in range(max_cameras):
        cap = cv2.VideoCapture(i)
        if cap.isOpened():
            cameras[i] = f"Cam{c + 1}"
            cap.release()  # 释放此摄像头
            c += 1
    return cameras
    
def show_searching_message():
    searching_window = Toplevel()
    searching_window.title("提醒")
    Label(searching_window, text="正在搜尋攝影機，請稍候...").pack(padx=30, pady=25)
    searching_window.update()
    return searching_window
    
def start_recording_thread():
    global resolution, recording_active, auto_start_timer, countdown_label, logger
    if recording_active:
        return  # 防止多次開始錄影
    recording_active = True
    
    if auto_start_timer:
        root.after_cancel(auto_start_timer)
    
    searching_window = show_searching_message()
    cameras = find_cameras() # 開啟攝影機
    searching_window.destroy()
    
    if not cameras:
        messagebox.showerror("錯誤", "未找到任何攝影機！")
        logger.error('錯誤 未找到任何攝影機！')
        return
    countdown_label.config(text="自動開始錄影倒數: 已關閉")
        
    cap = {}
    out = {}
    current_hour = datetime.now().hour # 追蹤當前的小時數
    current_minute = datetime.now().minute # 追蹤當前的分鐘數
    frame_count = 0
    ng_count = 0
    count_minute_result = []
    highest_score = 0
    
    for cam_id, cam_name in cameras.items():
        cap[cam_id] = cv2.VideoCapture(cam_id)
        cap[cam_id].set(cv2.CAP_PROP_FRAME_WIDTH, resolution[0])
        cap[cam_id].set(cv2.CAP_PROP_FRAME_HEIGHT, resolution[1])
        out[cam_id] = videowriter(cam_name, resolution)
        
    # 主迴圈
    while recording_active:
        now = datetime.now()

        # 進入新的一小時，釋放上一小時的影片資源
        if current_hour != now.hour:
            current_time = datetime.now().strftime("%Y-%m-%d-%H")
            logger = set_logger(current_time)
            for cam_id in cameras.keys():
                out[cam_id].release()
                out[cam_id] = videowriter(cameras[cam_id], resolution)
            frame_count = 0
            delete_old_folders(output_folder, hours_to_keep)
            current_hour = now.hour
        
        for cam_id, cam_name in cameras.items():
            # 讀取影像
            ret, frame = cap[cam_id].read()
            #frame = cv2.resize(frame, frame_size)
            
            if not ret:
                continue
                
            frame_count += 1
                
            if detection_enabled:    
                # 影像處理
                if cam_name == "Cam1":
                    frame, filtered_image, result, target_score = image_processing(frame, cam_name, Cam1_x1, Cam1_x2, Cam1_y1, Cam1_y2, Cam1_lower_color, Cam1_upper_color, Cam1_lower_thresh, Cam1_upper_thresh, frame_count, ng_count, ng_count_thresh)
                elif cam_name == "Cam2":
                    frame, filtered_image, result, target_score = image_processing(frame, cam_name, Cam2_x1, Cam2_x2, Cam2_y1, Cam2_y2, Cam2_lower_color, Cam2_upper_color, Cam2_lower_thresh, Cam2_upper_thresh, frame_count, ng_count, ng_count_thresh)   
                    
                count_minute_result.append(result)
                if float(target_score) > highest_score:
                    highest_score = float(target_score)
                if 'NG' in result:
                    logger.info(' !*!*! NG !*!*!  Score: {}'.format(str(highest_score)))
                    upload_thread = threading.Thread(target=upload_to_ftp, args=(cam_name, frame,))
                    upload_thread.start()
                if current_minute != datetime.now().minute:
                    current_minute = datetime.now().minute
                    if 'NG' in count_minute_result:
                        if not on_windows:
                            if redRelay.GET_GPIO() == 0:
                                a.xbee_result('NG')
                    else:
                        if not on_windows:
                            a.xbee_result('Pass')
                    count_minute_result = []
                    highest_score = 0
                
                if result == 'NG':
                    ng_count += 1
                else:
                    ng_count = 0
            
            # 寫入影格到影片
            out[cam_id].write(frame)
            
            # 即時顯示影像
            cv2.imshow(cam_name, frame)
            
        # 按下 'q' 鍵跳出迴圈
        if cv2.waitKey(1) & 0xFF == ord('q'):
            stop_recording()
            break
            
    # 關閉攝影機
    for cam_id in cameras.keys():
        cap[cam_id].release()
        out[cam_id].release()

    # 關閉視窗
    cv2.destroyAllWindows()
    cv2.destroyAllWindows()
    if not on_windows:
        a.close()
    
def start_recording():
    recording_thread = threading.Thread(target=start_recording_thread)
    recording_thread.start()
    
def stop_recording():
    global recording_active
    recording_active = False
    messagebox.showinfo("錄影停止", "錄影已停止")
    
def apply_settings():
    global cpu_limit_percentage, resolution, hours_to_keep
    global Cam1_lower_thresh, Cam1_upper_thresh, Cam1_x1, Cam1_y1, Cam1_x2, Cam1_y2
    global Cam1_lower_color, Cam1_upper_color
    global Cam2_lower_thresh, Cam2_upper_thresh, Cam2_x1, Cam2_y1, Cam2_x2, Cam2_y2
    global Cam2_lower_color, Cam2_upper_color
    
    try:
        cpu_limit_percentage = int(cpu_limit_entry.get())
        #resolution = (int(width_entry.get()), int(height_entry.get()))
        resolution_str = resolution_entry.get()
        resolution_width, resolution_height = map(int, resolution_str.split(' x '))
        resolution = (resolution_width, resolution_height)
        logger.info('resolution set: {}'.format(str(resolution)))
        hours_to_keep = int(hours_entry.get())
        Cam1_lower_thresh = float(Cam1_lower_thresh_entry.get())
        Cam1_upper_thresh = float(Cam1_upper_thresh_entry.get())
        Cam1_x1 = max(0, int(Cam1_x1_entry.get()))
        Cam1_x1 = min(resolution[0], int(Cam1_x1_entry.get()))
        Cam1_y1 = max(0, int(Cam1_y1_entry.get()))
        Cam1_y1 = min(resolution[1], int(Cam1_y1_entry.get()))
        Cam1_x2 = max(0, int(Cam1_x2_entry.get()))
        Cam1_x2 = min(resolution[0], int(Cam1_x2_entry.get()))
        Cam1_y2 = max(0, int(Cam1_y2_entry.get()))
        Cam1_y2 = min(resolution[1], int(Cam1_y2_entry.get()))
        Cam1_lower_color_R = int(Cam1_lower_color_R_entry.get())
        Cam1_lower_color_G = int(Cam1_lower_color_G_entry.get())
        Cam1_lower_color_B = int(Cam1_lower_color_B_entry.get())
        Cam1_lower_color = np.array([Cam1_lower_color_R, Cam1_lower_color_G, Cam1_lower_color_B])
        Cam1_upper_color_R = int(Cam1_upper_color_R_entry.get())
        Cam1_upper_color_G = int(Cam1_upper_color_G_entry.get())
        Cam1_upper_color_B = int(Cam1_upper_color_B_entry.get())
        Cam1_upper_color = np.array([Cam1_upper_color_R, Cam1_upper_color_G, Cam1_upper_color_B])
        Cam2_lower_thresh = float(Cam2_lower_thresh_entry.get())
        Cam2_upper_thresh = float(Cam2_upper_thresh_entry.get())
        Cam2_x1 = max(0, int(Cam2_x1_entry.get()))
        Cam2_x1 = min(resolution[0], int(Cam2_x1_entry.get()))
        Cam2_y1 = max(0, int(Cam2_y1_entry.get()))
        Cam2_y1 = min(resolution[1], int(Cam2_y1_entry.get()))
        Cam2_x2 = max(0, int(Cam2_x2_entry.get()))
        Cam2_x2 = min(resolution[0], int(Cam2_x2_entry.get()))
        Cam2_y2 = max(0, int(Cam2_y2_entry.get()))
        Cam2_y2 = min(resolution[1], int(Cam2_y2_entry.get()))
        Cam2_lower_color_R = int(Cam2_lower_color_R_entry.get())
        Cam2_lower_color_G = int(Cam2_lower_color_G_entry.get())
        Cam2_lower_color_B = int(Cam2_lower_color_B_entry.get())
        Cam2_lower_color = np.array([Cam2_lower_color_R, Cam2_lower_color_G, Cam2_lower_color_B])
        Cam2_upper_color_R = int(Cam2_upper_color_R_entry.get())
        Cam2_upper_color_G = int(Cam2_upper_color_G_entry.get())
        Cam2_upper_color_B = int(Cam2_upper_color_B_entry.get())
        Cam2_upper_color = np.array([Cam2_upper_color_R, Cam2_upper_color_G, Cam2_upper_color_B])
        
        config["General"]["cpu_limit_percentage"] = str(cpu_limit_percentage)
        config["General"]["resolution_width"] = str(resolution[0])
        config["General"]["resolution_height"] = str(resolution[1])
        config["General"]["hours_to_keep"] = str(hours_to_keep)
        config["General"]["detection_enabled"] = str(detection_enabled)
        config["Cam1"]["lower_thresh"] = str(Cam1_lower_thresh)
        config["Cam1"]["upper_thresh"] = str(Cam1_upper_thresh)
        config["Cam1"]["x1"] = str(Cam1_x1)
        config["Cam1"]["y1"] = str(Cam1_y1)
        config["Cam1"]["x2"] = str(Cam1_x2)
        config["Cam1"]["y2"] = str(Cam1_y2)
        config["Cam1"]["lower_color_r"] = str(Cam1_lower_color_R)
        config["Cam1"]["lower_color_g"] = str(Cam1_lower_color_G)
        config["Cam1"]["lower_color_b"] = str(Cam1_lower_color_B)
        config["Cam1"]["upper_color_r"] = str(Cam1_upper_color_R)
        config["Cam1"]["upper_color_g"] = str(Cam1_upper_color_G)
        config["Cam1"]["upper_color_b"] = str(Cam1_upper_color_B)
        config["Cam2"]["lower_thresh"] = str(Cam2_lower_thresh)
        config["Cam2"]["upper_thresh"] = str(Cam2_upper_thresh)
        config["Cam2"]["x1"] = str(Cam2_x1)
        config["Cam2"]["y1"] = str(Cam2_y1)
        config["Cam2"]["x2"] = str(Cam2_x2)
        config["Cam2"]["y2"] = str(Cam2_y2)
        config["Cam2"]["lower_color_r"] = str(Cam2_lower_color_R)
        config["Cam2"]["lower_color_g"] = str(Cam2_lower_color_G)
        config["Cam2"]["lower_color_b"] = str(Cam2_lower_color_B)
        config["Cam2"]["upper_color_r"] = str(Cam2_upper_color_R)
        config["Cam2"]["upper_color_g"] = str(Cam2_upper_color_G)
        config["Cam2"]["upper_color_b"] = str(Cam2_upper_color_B)
        
        save_config(config)
        
        messagebox.showinfo("Settings Applied", "Settings applied successfully.")
        logger.info('Settings applied successfully.')
    except ValueError:
        messagebox.showerror("Error", "Invalid input. Please enter valid numbers.")

def update_detection():
    global detection_enabled
    detection_enabled = not detection_enabled
    detection_btn.config(text="檢測顏殘功能 : 開啟 (檢測中)" if detection_enabled else "檢測顏殘功能 : 關閉 (僅錄影)")
    logger.info('檢測顏殘功能 : 開啟 (檢測中)' if detection_enabled else '檢測顏殘功能 : 關閉 (僅錄影)')

def update_countdown():
    global countdown_seconds, auto_start_timer, countdown_label
    countdown_seconds -= 1
    countdown_label.config(text=f"自動開始錄影倒數: {countdown_seconds} 秒")
        
    if countdown_seconds > 0:
        auto_start_timer = root.after(1000, update_countdown)  # 每秒更新一次
    else:
        start_recording()
    
def setup_ui():
    global auto_start_timer, root, countdown_label, detection_btn
    root = Tk()
    root.title("顏殘檢測設定 | Detector Settings")
    
################ 基礎設定 ################

    Label(root, text="CPU使用率限制 | CPU Limit (%)").grid(row=0, column=0, padx=5, pady=5)
    global cpu_limit_entry
    cpu_limit_entry = Entry(root)
    cpu_limit_entry.grid(row=0, column=1, pady=5)
    cpu_limit_entry.insert(0, str(cpu_limit_percentage))

    global resolution_entry
    resolution_entry = StringVar(root)
    resolution_entry.set(f"{resolution[0]} x {resolution[1]}")  # 預設解析度
    Label(root, text="解析度 | Resolution").grid(row=1, column=0, pady=5)
    resolution_options = [f"{w} x {h}" for w, h in SUPPORTED_RESOLUTIONS]
    OptionMenu(root, resolution_entry, *resolution_options).grid(row=1, column=1, pady=5)
    
    Label(root, text="資料夾保留時數 (小時/hour)").grid(row=3, column=0, pady=5)
    global hours_entry
    hours_entry = Entry(root)
    hours_entry.grid(row=3, column=1, pady=5)
    hours_entry.insert(0, str(hours_to_keep))
    
    separator = Frame(root, height=2, bg='white')
    separator.grid(row=4, column=0, columnspan=4, sticky='ew', pady=5)
    
################ 1號攝影機 ################    

    Label(root, text="1號攝影機-偵測範圍 左上角 XY座標 ").grid(row=5, column=0, pady=5)
    global Cam1_x1_entry, Cam1_y1_entry
    Cam1_x1_entry = Entry(root) 
    Cam1_x1_entry.grid(row=5, column=1)
    Cam1_x1_entry.insert(0, str(Cam1_x1))
    Cam1_y1_entry = Entry(root)
    Cam1_y1_entry.grid(row=5, column=2)
    Cam1_y1_entry.insert(0, str(Cam1_y1))
    
    Label(root, text="1號攝影機-偵測範圍 右下角 XY座標 ").grid(row=6, column=0, pady=5)
    global Cam1_x2_entry, Cam1_y2_entry
    Cam1_x2_entry = Entry(root) 
    Cam1_x2_entry.grid(row=6, column=1)
    Cam1_x2_entry.insert(0, str(Cam1_x2))
    Cam1_y2_entry = Entry(root)
    Cam1_y2_entry.grid(row=6, column=2)
    Cam1_y2_entry.insert(0, str(Cam1_y2))
    
    Label(root, text="1號攝影機-顏殘RGB平均值  門檻值(低-高)").grid(row=7, column=0, pady=5)
    global Cam1_lower_thresh_entry, Cam1_upper_thresh_entry
    Cam1_lower_thresh_entry = Entry(root) 
    Cam1_lower_thresh_entry.grid(row=7, column=1)
    Cam1_lower_thresh_entry.insert(0, str(Cam1_lower_thresh))
    Cam1_upper_thresh_entry = Entry(root)
    Cam1_upper_thresh_entry.grid(row=7, column=2)
    Cam1_upper_thresh_entry.insert(0, str(Cam1_upper_thresh))

    Label(root, text="1號攝影機-偵測顏殘 最深(B, G, R)").grid(row=8, column=0, pady=5)
    global Cam1_lower_color_R_entry, Cam1_lower_color_G_entry, Cam1_lower_color_B_entry
    Cam1_lower_color_R_entry = Entry(root)
    Cam1_lower_color_R_entry.grid(row=8, column=1)
    Cam1_lower_color_R_entry.insert(0, str(Cam1_lower_color_R))
    Cam1_lower_color_G_entry = Entry(root)
    Cam1_lower_color_G_entry.grid(row=8, column=2)
    Cam1_lower_color_G_entry.insert(0, str(Cam1_lower_color_G))
    Cam1_lower_color_B_entry = Entry(root)
    Cam1_lower_color_B_entry.grid(row=8, column=3)
    Cam1_lower_color_B_entry.insert(0, str(Cam1_lower_color_B))
    
    Label(root, text="1號攝影機-偵測顏殘 最淺(B, G, R)").grid(row=9, column=0, pady=5)
    global Cam1_upper_color_R_entry, Cam1_upper_color_G_entry, Cam1_upper_color_B_entry
    Cam1_upper_color_R_entry = Entry(root)
    Cam1_upper_color_R_entry.grid(row=9, column=1)
    Cam1_upper_color_R_entry.insert(0, str(Cam1_upper_color_R))
    Cam1_upper_color_G_entry = Entry(root)
    Cam1_upper_color_G_entry.grid(row=9, column=2)
    Cam1_upper_color_G_entry.insert(0, str(Cam1_upper_color_G))
    Cam1_upper_color_B_entry = Entry(root)
    Cam1_upper_color_B_entry.grid(row=9, column=3)
    Cam1_upper_color_B_entry.insert(0, str(Cam1_upper_color_B))
    
    separator = Frame(root, height=2, bg='white')
    separator.grid(row=10, column=0, columnspan=4, sticky='ew', pady=5)

################ 2號攝影機 ################    

    Label(root, text="2號攝影機-偵測範圍 左上角 XY座標 ").grid(row=11, column=0, pady=5)
    global Cam2_x1_entry, Cam2_y1_entry
    Cam2_x1_entry = Entry(root) 
    Cam2_x1_entry.grid(row=11, column=1)
    Cam2_x1_entry.insert(0, str(Cam2_x1))
    Cam2_y1_entry = Entry(root)
    Cam2_y1_entry.grid(row=11, column=2)
    Cam2_y1_entry.insert(0, str(Cam2_y1))
    
    Label(root, text="2號攝影機-偵測範圍 右下角 XY座標 ").grid(row=12, column=0, pady=5)
    global Cam2_x2_entry, Cam2_y2_entry
    Cam2_x2_entry = Entry(root) 
    Cam2_x2_entry.grid(row=12, column=1)
    Cam2_x2_entry.insert(0, str(Cam2_x2))
    Cam2_y2_entry = Entry(root)
    Cam2_y2_entry.grid(row=12, column=2)
    Cam2_y2_entry.insert(0, str(Cam2_y2))
    
    Label(root, text="2號攝影機-顏殘RGB平均值 門檻值(低-高)").grid(row=13, column=0, pady=5)
    global Cam2_lower_thresh_entry, Cam2_upper_thresh_entry
    Cam2_lower_thresh_entry = Entry(root) 
    Cam2_lower_thresh_entry.grid(row=13, column=1)
    Cam2_lower_thresh_entry.insert(0, str(Cam2_lower_thresh))
    Cam2_upper_thresh_entry = Entry(root)
    Cam2_upper_thresh_entry.grid(row=13, column=2)
    Cam2_upper_thresh_entry.insert(0, str(Cam2_upper_thresh))

    Label(root, text="2號攝影機-偵測顏殘 最深(R, G, B)").grid(row=14, column=0, pady=5)
    global Cam2_lower_color_R_entry, Cam2_lower_color_G_entry, Cam2_lower_color_B_entry
    Cam2_lower_color_R_entry = Entry(root)
    Cam2_lower_color_R_entry.grid(row=14, column=1)
    Cam2_lower_color_R_entry.insert(0, str(Cam2_lower_color_R))
    Cam2_lower_color_G_entry = Entry(root)
    Cam2_lower_color_G_entry.grid(row=14, column=2)
    Cam2_lower_color_G_entry.insert(0, str(Cam2_lower_color_G))
    Cam2_lower_color_B_entry = Entry(root)
    Cam2_lower_color_B_entry.grid(row=14, column=3)
    Cam2_lower_color_B_entry.insert(0, str(Cam2_lower_color_B))
    
    Label(root, text="2號攝影機-偵測顏殘 最淺(R, G, B)").grid(row=15, column=0, pady=5)
    global Cam2_upper_color_R_entry, Cam2_upper_color_G_entry, Cam2_upper_color_B_entry
    Cam2_upper_color_R_entry = Entry(root)
    Cam2_upper_color_R_entry.grid(row=15, column=1)
    Cam2_upper_color_R_entry.insert(0, str(Cam2_upper_color_R))
    Cam2_upper_color_G_entry = Entry(root)
    Cam2_upper_color_G_entry.grid(row=15, column=2)
    Cam2_upper_color_G_entry.insert(0, str(Cam2_upper_color_G))
    Cam2_upper_color_B_entry = Entry(root)
    Cam2_upper_color_B_entry.grid(row=15, column=3)
    Cam2_upper_color_B_entry.insert(0, str(Cam2_upper_color_B))
    
################ 按鈕 ################ 
    
    detection_btn = Button(root, text="檢測顏殘功能 : 開啟 (檢測中)" if detection_enabled else "檢測顏殘功能 : 關閉 (僅錄影)", command=update_detection)
    detection_btn.grid(row=16, column=0, columnspan=2, pady=10)
    
    apply_btn = Button(root, text="套用設定 | Apply Settings", command=apply_settings)
    apply_btn.grid(row=17, column=0, columnspan=2, pady=20)
    
    separator = Frame(root, height=2, bg='grey')
    separator.grid(row=18, column=0, columnspan=4, sticky='ew', pady=5)
    
    countdown_label = Label(root, text=f"自動開始錄影倒數: {countdown_seconds} 秒")
    countdown_label.grid(row=19, column=0, columnspan=2, pady=5)
    
    start_btn = Button(root, text="開始錄影 | Start Recording", command=start_recording)
    start_btn.grid(row=20, column=0, columnspan=2, pady=10)
    
    stop_btn = Button(root, text="停止錄影 | Stop Recording", command=stop_recording)
    stop_btn.grid(row=21, column=0, columnspan=2, pady=10)
    
    
    # 啟動時設置 1 分鐘計時器
    auto_start_timer = root.after(1000, update_countdown)

    root.mainloop()
    
################ process ################

def color_filter(image, lower_color, upper_color, region):
    mask = cv2.inRange(image, lower_color, upper_color)
    mask_roi = cv2.bitwise_and(mask, region)
    filtered_image = cv2.bitwise_and(image, image, mask=mask_roi)
    return filtered_image, mask_roi

def save_image(cam_name, frame, path, frame_count, name = None):
    now = datetime.now()
    timestamp = now.strftime("%Y%m%d%H%M%S")
    if name == 'og':
        filename = f"{cam_name}_{timestamp}_{frame_count}_og.jpg"
    else:
        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        filename = f"{cam_name}_{timestamp}_{frame_count}.jpg"
    filepath = os.path.join(path, filename)
    cv2.imwrite(filepath, frame)

def image_processing(frame, cam_name, x1, x2, y1, y2, lower_color, upper_color, lower_thresh, upper_thresh, frame_count, ng_count, ng_count_thresh):
    result = ''
    now = datetime.now()
    # 指定要检测的区域
    region = np.zeros(frame.shape[:2], dtype=np.uint8)
    region[y1:y2, x1:x2] = 255

    # 色彩過濾
    filtered_image, mask = color_filter(frame, lower_color, upper_color, region)
    target_score = np.mean(mask)
    print(cam_name + ' ' + str(target_score))
    
    cv2.putText(filtered_image, str(target_score), (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2, cv2.LINE_AA)
    cv2.putText(frame, str(target_score), (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2, cv2.LINE_AA)
    cv2.rectangle(filtered_image, (x1, y1), (x2, y2), (255, 255, 255), 2)
    timestamp = now.strftime("%Y%m%d%H%M%S")
    cv2.putText(frame, timestamp, (10, 450), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 255), 1, cv2.LINE_AA)
    
    # 檢查目標區域的像素值是否超過閥值，如果是，則儲存圖像
    if np.mean(mask) > lower_thresh and np.mean(mask) < upper_thresh:
        path = os.path.join(output_folder, now.strftime("%Y%m%d%H"))
        cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 0, 255), 2)
        save_image(cam_name, frame, path, frame_count, 'og')
        save_image(cam_name, filtered_image, path, frame_count)
        print(cam_name + ' 目標區域像素值超過閥值 ' + str(target_score))
        result = 'NG'
        if not on_windows:
            #Rusb.Relay_Open_to_Close(1)
            logger.info('relay not set : relay_open to close pass')
    else:
        cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
        result = 'Pass'
        
    return frame, filtered_image, result, target_score
    

    
if __name__ == "__main__":
    current_hour = datetime.today().strftime("%Y-%m-%d-%H") 
    logger = set_logger(current_hour)
    setup_ui()
