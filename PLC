main.py

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Sep  2 16:23:04 2020

@author: etao
"""

from PLClib import PLC

HOST="192.168.1.2"
POST=5001
plc=PLC(HOST,POST)

def printData(w,data):
    for i,d in enumerate(data):
        print(w+"%02d"%i+"="+str(d),end="\t")
        if (i+1)%5==0:
            print("")
    print("")

data = plc.get("D",0,20)
printData("D",data)
data = plc.get("Y",0,20)
printData("Y",data)
print("********************")
print("setting D and Y...")
plc.set("D",7,3,[123,456,789])
plc.set("Y",0,6,[1,0,1,0,1,1])


print("********************")
data = plc.get("D",0,20)
printData("D",data)
data = plc.get("Y",0,20)
printData("Y",data)


====================================================================

PLClib.py

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Sep  2 16:23:04 2020

@author: etao
"""

import socket
import numpy as np


HOST="192.168.1.2"
POST=5001

class PLC():
    def __init__(self,HOST,PORT):
        self.HOST = HOST
        self.PORT = PORT
        self.client = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
        
    def get(self,register,start,length):
        message = bytearray(b'\x50\x00\x00\xFF\xFF\x03\x00\x0C\x00\x00\x00\x01\x04\x00\x00')
        register=register.upper()
        if register == 'D':
            deviceCode=0xA8
            dataType="word"
        elif register == 'M':
            deviceCode=0x90
            dataType="bit"
        elif register == 'X':
            deviceCode=0x9C
            dataType="bit"
        elif register == 'Y':
            deviceCode=0x9D
            dataType="bit"
        else:
            raise Exception('Does not support register type '+str(register)+'.')
            
        if dataType =="word":
            message[13]=0 #change subcommand
        elif dataType =="bit":
            message[13]=1
            
        startB = bytearray(start.to_bytes(3,'little'))
        lengthB = bytearray(length.to_bytes(2,'little'))
        message+=startB
        message.append(deviceCode)
        message+=lengthB
        self.client.sendto(message,(self.HOST,self.PORT))
        #print("con")
        response = self.client.recv(1024)
        response = list(response)
        response = np.array(response)
        if dataType =="word":
            focus = response[11:11+length*2]
            data = focus[1::2]*256+focus[0::2]
        elif dataType =="bit":
            focus = response[11:11+length]
            data=[]
            for i in focus:
                data.append(i>>4)
                data.append(i&0xF)
        return data
    
    def set(self,register,start,length,value):
        value=np.array(value)
        message = bytearray(b'\x50\x00\x00\xFF\xFF\x03\x00\x0C\x00\x00\x00\x01\x14\x00\x00')
        register=register.upper()
        if register == 'D':
            deviceCode=0xA8
            dataType="word"
        elif register == 'M':
            deviceCode=0x90
            dataType="bit"
        elif register == 'X':
            deviceCode=0x9C
            dataType="bit"
        elif register == 'Y':
            deviceCode=0x9D
            dataType="bit"
        else:
            raise Exception('Does not support register type '+str(register)+'.')
            
        data=bytearray()
        if dataType =="word":
            message[13]=0 #change subcommand
            for v in value:
                data.append(v&0xFF)
                data.append(v>>8)
        elif dataType =="bit":
            message[13]=1
            value=value[0::2]*16+value[1::2]
            for v in value:
                data.append(v)
        startB = bytearray(start.to_bytes(3,'little'))
        lengthB = bytearray(length.to_bytes(2,'little'))
        message+=startB
        message.append(deviceCode)
        message+=lengthB
        message+=data
        dataLen=len(message)-9  #trasmit total length after index 8
        message[7]=dataLen&0xFF 
        message[8]=dataLen>>8
        self.client.sendto(message,(self.HOST,self.PORT))
        #print("con")
        response = self.client.recv(1024)
        response = list(response)
    
    
    
    
    

